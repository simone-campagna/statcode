#!/usr/bin/env python3
#
# Copyright 2013 Simone Campagna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = 'Simone Campagna'

import os
import sys
import resource
import argparse

from statcode.project import *
from statcode.statcode_config import StatCodeConfig
from statcode.filetype_classifier import FileTypeClassifier

STATCODE_HOME_DIR = "@STATCODE_HOME_DIR@"

def main():
    parser = argparse.ArgumentParser(
        description="""\
Show statistics about a source code project.
"""
    )

    config_file = os.path.join(STATCODE_HOME_DIR, 'etc', 'statcode', 'statcode.ini')
    config_files = []
    if not os.path.exists(config_file):
        config_required = True
    else:
        config_files = [config_file]
        config_required = False

    sort_keys = ['filetype', 'files', 'lines', 'bytes']

    parser.add_argument("project_dirs",
        nargs='+',
        help='project directories')

    parser.add_argument("--config", "-c",
        dest="config_files",
        action="append",
        default=config_files,
        help="add config file")

    parser.add_argument("--filetype", "-f",
        metavar="F",
        nargs='+',
        help='project filetype(s)')

    parser.add_argument("--sort-key", "-k",
        dest='sort_keys',
        metavar="K",
        nargs="+",
        default=[SortKey('filetype'), SortKey('files'), SortKey('lines')],
        type=SortKey,
        help='sort keys [{}]'.format(SortKey.choices()))

    parser.add_argument("--list-files", "-L",
        dest='list_filetype_files',
        metavar="F",
        nargs='+',
        help='list files for the chosen filetypes')

    parser.add_argument("--group-categories", "-G",
        dest='group_categories',
        metavar="F",
        nargs='+',
        default=['!language'],
        help='group/expand categories matching with given pattern(s)')

    parser.add_argument("--select-filetypes", "-S",
        dest='select_filetypes',
        metavar="L",
        nargs='+',
        default=[],
        help='select filetypes matching given pattern')

    args = parser.parse_args()

    if not args.config_files:
        sys.stderr.write("ERR: at least 1 config file is required\n")
        sys.exit(1)
        
    for config_file in args.config_files:
        if not os.path.exists(config_file):
            sys.stderr.write("ERR: config file {!r} does not exists\n".format(config_file))
            sys.exit(1)

    statcode_config = StatCodeConfig.fromfiles(*args.config_files)
    project_configuration = ProjectConfiguration(statcode_config)

#    select_filetypes = getattr(args, 'select_filetypes', None)
#    if select_filetypes is not None:
#        patterns = select_filetypes
#        pattern_type='+'
#    elif discard_filetypes is not None:
#        patterns = discard_filetypes
#        pattern_type='-'
#    else:
#        patterns = FileTypeClassifier.NO_FILETYPE_FILES
#        pattern_type='-'

    meta_project = MetaProject(configuration=project_configuration)
    cum_el_utime = 0.0
    cum_el_stime = 0.0
    for project_dir in args.project_dirs:
        project_dir = os.path.normpath(os.path.abspath(project_dir))

        sys.stderr.write("# Scanning directory [{}]... ".format(project_dir))
        sys.stderr.flush()

        rusage0 = resource.getrusage(resource.RUSAGE_SELF)
        utime0, stime0 = rusage0.ru_utime, rusage0.ru_stime

        project = Project(configuration=project_configuration, project_dir=project_dir, filetype_hints=args.filetype)

        rusage1 = resource.getrusage(resource.RUSAGE_SELF)
        utime1, stime1 = rusage1.ru_utime, rusage1.ru_stime
        el_utime = utime1 - utime0
        el_stime = stime1 - stime0

        sys.stderr.write("done [{}]\n".format(project.tree_stats.result()))
        sys.stderr.write("#  [elapsed: user={:.2f} seconds, system={:.2f} seconds]\n".format(el_utime, el_stime))
        sys.stderr.flush()

        cum_el_utime += el_utime
        cum_el_stime += el_stime

        meta_project.add_project(project)
        #if args.list_filetype_files:
        #    project.list_filetype_files(args.list_filetype_files, sort_keys=args.sort_keys)
        #else:
        #    project.report(sort_keys=args.sort_keys, select_filetypes=args.select_filetypes, group_categories=args.group_categories)

    if len(args.project_dirs) > 1:
        sys.stderr.write("# Scanning [{}] done;\n".format(meta_project.name))
        sys.stderr.write("#  [elapsed: user={:.2f} seconds, system={:.2f} seconds]\n".format(cum_el_utime, cum_el_stime))
        sys.stderr.flush()
    
    if args.list_filetype_files:
        meta_project.list_filetype_files(args.list_filetype_files, sort_keys=args.sort_keys)
    else:
        meta_project.report(sort_keys=args.sort_keys, select_filetypes=args.select_filetypes, group_categories=args.group_categories)

if __name__ == "__main__":
    main()
