#!/usr/bin/env python3
#
# Copyright 2013 Simone Campagna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = 'Simone Campagna'

import os
import argparse

from statcode.project import *
from statcode.language import LanguageClassifier

STATCODE_HOME_DIR = "@STATCODE_HOME_DIR@"

def main():
    parser = argparse.ArgumentParser(
        description="""\
Show statistics about a source code project.
"""
    )

    config_file = os.path.join(STATCODE_HOME_DIR, 'etc', 'statcode', 'statcode.ini')
    if not os.path.exists(config_file):
        config_file = None
        config_required = True
    else:
        config_required = False

    sort_keys = ['language', 'files', 'lines', 'bytes']

    parser.add_argument("project_dirs",
        nargs='+',
        help='project directories')

    parser.add_argument("--config", "-c",
        required=config_required,
        default=config_file,
        help="config file")

    parser.add_argument("--language", "-l",
        metavar="L",
        nargs='+',
        help='project language(s)')

    parser.add_argument("--sort-key", "-k",
        dest='sort_keys',
        metavar="K",
        nargs="+",
        default=[SortKey('language'), SortKey('files'), SortKey('lines')],
        type=SortKey,
        help='sort keys [{}]'.format(SortKey.choices()))

    parser.add_argument("--list-files", "-L",
        dest='list_language_files',
        metavar="L",
        nargs='+',
        help='list files for the chosen languages')

    select_discard_group = parser.add_mutually_exclusive_group()
    select_discard_group.add_argument("--select-languages", "-S",
        dest='select_languages',
        metavar="L",
        nargs='+',
        help='select languages matching given pattern')

    select_discard_group.add_argument("--discard-languages", "-D",
        dest='discard_languages',
        metavar="L",
        nargs='+',
        help='discard languages matching given pattern')

    args = parser.parse_args()

    if not os.path.exists(args.config):
        sys.stderr.write("ERR: config file {!r} does not exists\n".format(args.config_file))
        sys.exit(1)

    select_languages = getattr(args, 'select_languages', None)
    discard_languages = getattr(args, 'discard_languages', None)
    if select_languages is not None:
        patterns = select_languages
        pattern_type='+'
    elif discard_languages is not None:
        patterns = discard_languages
        pattern_type='-'
    else:
        patterns = LanguageClassifier.NO_LANGUAGE_FILES
        pattern_type='-'

    meta_project = MetaProject()
    for project_dir in args.project_dirs:
        project_dir = os.path.normpath(os.path.abspath(project_dir))
        project = Project(config_file=args.config, project_dir=project_dir, language_hints=args.language)
        meta_project.add_project(project)

    if args.list_language_files:
        for language in args.list_language_files:
            meta_project.list_language_files(language, sort_keys=args.sort_keys)
    else:
        meta_project.report(sort_keys=args.sort_keys, patterns=patterns, pattern_type=pattern_type)

if __name__ == "__main__":
    main()
